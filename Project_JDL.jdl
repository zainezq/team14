// Ben
entity PlayerProfile {
    userID Integer required
    Name String required
    Gender Genders required
    Location String
    Rating Integer
    Position Positions
    Contact ContactType
    Rating Double
}

entity RefereeProfile {
    userID Integer required
    Name String required
    Gender Genders required
    Location String
    Rating Integer
    Contact ContactType
    Rating Integer
}

entity Availability {
    monday Boolean,
    tuesday Boolean,
    wednesday Boolean,
    thursday Boolean,
    friday Boolean,
    saturday Boolean,
    sunday Boolean
}


enum Genders{
    Male
    Female
    Unknown
}

enum Positions{
    GK
    LB
    CB
    RB
    DM
    CM
    AM
    LM
    RM
    ST
    LW
    RW
}

relationship OneToOne {
    PlayerProfile{availability} to Availability
}

relationship OneToOne {
    RefereeProfile{availability} to Availability
}

// Shlok

//Entities

entity FindPlayerAndReferee {
    userID String required,
    profilePicture ImageBlob required,
    name String required,
    position String required,
    area String required,
}

//This entity will be used to calculate the distance
//Of the user to all other players
//And then the user can find players according to the distance
entity Distance {
    myPlayerID String required,
    otherPlayerID String required,
    distance Double required,
}

//Define the entity for Available Dates
//The user can filter out players available for specific dates
entity AvailableDate{
    playerID String required,
    day LocalDate,
}

// Define the enum for contact type
//Each player can have a mail and/or a contact number
enum ContactType {
    EMAIL
    PHONE_NUMBER
    INSTAGRAM(Instagram)
}

//Relationships

relationship OneToMany {
    FindPlayerAndReferee{search} to Distance,
    FindPlayerAndReferee to AvailableDate,
}

relationship OneToOne{
    FindPlayerAndReferee{player} to PlayerProfile,
    FindPlayerAndReferee{referee} to RefereeProfile
}

relationship OneToOne{
    Availability to AvailableDate
}
// Define the relationship between Player and Contact
//each player can have multiple contacts

//Abdelmalek


entity Tournament {
    name String required,
    startDate Instant required,
    endDate Instant required,
    location String required,
    maxTeams Integer required
}
//
entity Registration {
    registrationDate Instant required,
    status RegistrationStatus required,
    teamName String required
}
//
enum RegistrationStatus {
    PENDING
    CONFIRMED
    CANCELLED
}
//
//
relationship OneToMany {
    Tournament{matches} to Match{tournament}
}
//


relationship ManyToMany {
    Tournament{teams} to Team{tournaments}
}

relationship ManyToOne {
    Match{team} to Team
}

relationship ManyToOne {
    Registration{team} to Team
}
//
relationship ManyToOne {
    Registration{tournament} to Tournament
}

////zaine
//
entity PitchBooking {
    bookingID Integer required
    bookingDate ZonedDateTime,
    startTime Instant,
    endTime Instant,
}

relationship OneToMany{
    Team{bookings} to PitchBooking{team}
}

relationship OneToOne{
    PitchBooking to Pitch
}
entity Pitch{
    pitchID Integer required
    name String,
    location String,
}
//
//

//
////zhiwen

entity Comment{
    authorID Integer
    userId Integer
    rating Integer
    content String
    liked Integer
    matchID Integer
}

relationship ManyToOne{
    Comment to PlayerProfile{comments}
}
relationship ManyToOne{
    Comment to RefereeProfile{comments}
}




//link to muneeb
//relationship ManyToOne {
//    Comment{match} to Match
//}

//Jon
entity Match {
    matchId Integer required
    homeScore Integer
    awayScore Integer
    date LocalDate
}

relationship OneToOne {
    Match{pitch} to Pitch
}

relationship OneToMany {
    Tournament{matches} to Match
}

relationship OneToOne {
    Match{home} to Team
    Match{away} to Team
}

////Muneeb
//entity User {
//    userId String unique required,
//    username String,
//    email String,
//    phoneNumber String,
//    profilePicture ImageBlob
//}
//
entity Team {
    //teamId String unique required,
    teamOwner String,
    created Instant,

    name String maxlength(40) required,
    description String maxlength(512),
    memberCount Integer,
    image ImageBlob,
    colour String,

    schedule String,
    playType PlayType
}

entity TeamMember {
    userIdentifier String required, // had to change userId and teamId to userIdentifier and teamIdentifier to get rid of a duplicate column error
    teamIdentifier String required
}

entity TeamContact {
    type ContactType,
    value String
}

relationship OneToMany {
    Team{members} to TeamMember{team}
}

relationship OneToOne {
    TeamMember{user} to PlayerProfile{teamMembership}
}

relationship OneToMany {
    Team{contacts} to TeamContact
}

relationship OneToOne {
    Team{owner} to TeamMember
}
//
//
enum PlayType {
    SOCIAL(Social),
    COMPETITIVE(Competitive)
}
//
//enum ContactType {

//}
